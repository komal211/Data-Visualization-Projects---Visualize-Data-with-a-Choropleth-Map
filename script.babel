const tooltip=document.getElementById('tooltip');

async function run(){
const eduData = await fetch('https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json');

const education = await eduData.json();

const countiesData = await fetch('https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json');

const countie = await countiesData.json();

const width = 980;
const height = 650;
  
const path = d3.geoPath();
  
const fulldata = topojson.feature(countie, countie.objects.counties).features;
  
const mineducation = d3.min(education, edu => edu.bachelorsOrHigher);
  
const maxeducation = d3.max(education, edu => edu.bachelorsOrHigher);
  
const step = (maxeducation - mineducation) / 8;
  
const colorsScale = d3.scaleThreshold()
    .domain(d3.range(mineducation, maxeducation, step))
    .range(d3.schemeGreens[9]);  
  
const colors = [];
  
for(let i=mineducation; i<=maxeducation; i+=step) {
    colors.push(i);
}
  
const svg = d3.select('#container').append('svg').attr('width', width).attr('height', height);
  
svg.append('g')
    .selectAll('path')
    .data(fulldata)
    .enter()
    .append('path')
    .attr('class', 'county')
    .attr('fill', d => colorsScale(education.find(edu => edu.fips === d.id).bachelorsOrHigher))
    .attr('d', path)
    .attr('data-fips', d => d.id)
    .attr('data-education', d => education.find(edu => edu.fips === d.id).bachelorsOrHigher)
    .on('mouseover', (d, i) => {
      const { coordinates } = d.geometry;
      const [x, y] = coordinates[0][0];

      const someeducation = education.find(edu => edu.fips === d.id);

      tooltip.classList.add('show');
      tooltip.style.left = x - 50 + 'px';
      tooltip.style.top = y - 50 + 'px';
      tooltip.setAttribute('data-education', someeducation.bachelorsOrHigher);

      tooltip.innerHTML = `
        <p>${someeducation.area_name} - ${someeducation.state}</p>
        <p>${someeducation.bachelorsOrHigher}%</p>
      `;
  }).on('mouseout', () => {
    tooltip.classList.remove('show');
  });
  const lWidth = 200;
  const lHeight = 30;

  const lRectWidth = lWidth / colors.length;
  const legend = d3.select('#container')
    .append('svg')
    .attr('id', 'legend')
    .attr('class', 'legend')
    .attr('width', lWidth)
    .attr('height', lHeight)
   
  legend.selectAll('rect')
    .data(colors)
    .enter()
    .append('rect')
    .attr('x', (_, i) => i * lRectWidth)
    .attr('y', 0)
    .attr('width', lRectWidth)
    .attr('height', lHeight)
    .attr('fill', c => colorsScale(c))
}

run();